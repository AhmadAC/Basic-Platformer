# .github/workflows/main.yml
name: Build Windows Executable (Platformer Game)

on:
  workflow_dispatch: # Allows manual triggering
  push:
    branches: [ "Best-Version-28-05" ]
  release:
    types: [published]

jobs:
  build-windows:
    name: Build Platformer for Windows
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11' # Or your preferred Python version
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        shell: bash # Using bash for consistency, but pwsh is fine too

      # --- Build Platformer.exe ---
      - name: Generate Base PyInstaller Spec File for Platformer
        run: |
          pyi-makespec --windowed --name Platformer ^
            --hidden-import PIL ^
            --hidden-import PIL.Image ^
            --hidden-import numpy ^
            --hidden-import PySide6.QtGui ^
            --hidden-import PySide6.QtCore ^
            --hidden-import PySide6.QtWidgets ^
            --hidden-import pygame ^
            --hidden-import pynput ^
            --hidden-import pyperclip ^
            app_core.py
        shell: cmd # Using cmd for multiline makespec command, pwsh with backticks works too

      - name: Modify the Spec File to Add Data Files for Platformer
        run: |
          $specFile = "Platformer.spec"
          Write-Host "Checking if $specFile exists..."
          if (!(Test-Path $specFile)) {
            Write-Error "$specFile not found after pyi-makespec!"
            exit 1
          }
          Write-Host "$specFile found. Attempting to modify..."
          $specContent = Get-Content -Path $specFile -Raw
          
          # Add 'assets', 'characters', 'maps', and 'controller_settings' folders.
          # The paths are relative to the project root (where app_core.py and the spec file are).
          # The destination is relative to the bundled app's root (dist/Platformer/).
          $dataToAdd = "[('assets', 'assets'), ('characters', 'characters'), ('maps', 'maps'), ('controller_settings', 'controller_settings')]"
                                        
          # Regex to find 'datas=[]' and replace it. 
          # It handles potential whitespace variations within the brackets.
          $modifiedContent = $specContent -replace 'datas=\s*\[\s*\]', "datas=$dataToAdd"

          if ($specContent -eq $modifiedContent) {
            Write-Host "--- Platformer Spec File Content START ---"
            Write-Host $specContent
            Write-Host "--- Platformer Spec File Content END ---"
            Write-Error "Failed to find and replace 'datas=[]' pattern in $specFile. Check the spec file content. It might not be empty or already modified."
            exit 1
          }

          Set-Content -Path $specFile -Value $modifiedContent
          Write-Host "Successfully added datas to $specFile."
          Write-Host "--- Modified Platformer Spec File Content START ---"
          Get-Content -Path $specFile | Write-Host
          Write-Host "--- Modified Platformer Spec File Content END ---"
        shell: pwsh

      - name: Build Platformer executable from Spec File
        run: |
          pyinstaller --noconfirm --log-level INFO Platformer.spec
        shell: bash

      - name: Upload Platformer Windows Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Platformer-Windows-Release
          path: dist/Platformer/ # This path contains the executable and all bundled files
          if-no-files-found: error