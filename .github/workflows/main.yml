name: Build Windows Executable (Dynamic Spec)

# Controls when the workflow will run
on:
  # Allows running this workflow manually from the Actions tab
  workflow_dispatch:

  # Runs on pushes targeting the main branch (optional)
  push:
    branches: [ "main" ]

  # Runs when a new release is published on GitHub
  release:
    types: [published]

jobs:
  build-windows:
    name: Build for Windows
    runs-on: windows-latest # Use a Windows runner

    steps:
      # 1. Checkout repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: requirements.txt # Assumes requirements.txt exists

      # 3. Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install from requirements.txt (MUST include pyinstaller)
          pip install -r requirements.txt
        shell: pwsh # Use PowerShell for consistency

      # 4. Generate BASE PyInstaller Spec File
      #    We generate a default --onedir spec and add necessary hidden imports
      - name: Generate Base PyInstaller Spec File
        run: |
          pyi-makespec --windowed --name BasicPlatformer `
            --hidden-import PIL `
            --hidden-import PIL.Image `
            --hidden-import numpy `
            main.py
          # This creates 'BasicPlatformer.spec'
          # It defaults to --onedir if --onefile is not specified
        shell: pwsh

      # 5. Modify the Spec File to Add Data Files
      - name: Add data files to Spec File
        run: |
          $specFile = "BasicPlatformer.spec" # Name matches '--name' arg above
          Write-Host "Checking if $specFile exists..."
          if (!(Test-Path $specFile)) {
            Write-Error "$specFile not found after pyi-makespec!"
            exit 1
          }
          Write-Host "$specFile found. Attempting to modify..."
          $specContent = Get-Content -Path $specFile -Raw
          $dataToAdd = "[('characters', 'characters')]" # The data tuple/list we need
          # Regex to find 'datas=[]' (allowing for spaces) and replace it
          $modifiedContent = $specContent -replace 'datas=\s*\[\s*\]', "datas=$dataToAdd"

          # Check if replacement actually happened
          if ($specContent -eq $modifiedContent) {
            Write-Host "--- Spec File Content START ---"
            Write-Host $specContent
            Write-Host "--- Spec File Content END ---"
            Write-Error "Failed to find and replace 'datas=[]' pattern in $specFile. Check the content above."
            exit 1
          }

          # Write the modified content back to the spec file
          Set-Content -Path $specFile -Value $modifiedContent
          Write-Host "Successfully added datas to $specFile."
        shell: pwsh

      # 6. Build the executable using the MODIFIED spec file
      - name: Build executable from Spec File
        run: |
          pyinstaller --noconfirm --log-level INFO BasicPlatformer.spec
        shell: pwsh

      # 7. Upload the artifact (the generated FOLDER)
      - name: Upload Windows Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: BasicPlatformer-Windows-Folder # Artifact name indicates folder
          path: dist/BasicPlatformer/ # Path to the FOLDER generated by PyInstaller
          if-no-files-found: error # Fail if the folder wasn't created
