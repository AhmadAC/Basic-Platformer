name: Build Windows Executable

# Controls when the workflow will run
on:
  # Allows running this workflow manually from the Actions tab
  workflow_dispatch:

  # Runs on pushes targeting the main branch (optional)
  # push:
  #   branches: [ "main" ]

  # Runs when a new release is published on GitHub
  release:
    types: [published]

jobs:
  build-windows:
    runs-on: windows-latest # Use a Windows runner

    steps:
      # 1. Checkout repository code
      - name: Checkout code
        uses: actions/checkout@v4 # Use latest version

      # 2. Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5 # Use latest version
        with:
          python-version: '3.9' # Specify your desired Python version (e.g., 3.9, 3.10, 3.11)

      # 3. Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install PyInstaller, Pygame, Pillow, NumPy
          pip install pyinstaller pygame Pillow numpy
          # Optional: If you use a requirements.txt file:
          # pip install -r requirements.txt

      # 4. Build the executable using PyInstaller and the spec file
      - name: Build with PyInstaller
        run: |
          # Run PyInstaller using your main.spec configuration
          # The --onefile flag might be redundant if specified in the spec, but ensures it
          # The --noconfirm flag prevents prompts if output folder exists
          # The --log-level INFO provides reasonable build output
          pyinstaller main.spec --onefile --noconfirm --log-level INFO

      # 5. Upload the artifact (the generated .exe file)
      - name: Upload Windows Build Artifact
        uses: actions/upload-artifact@v4 # Use latest version
        with:
          name: BasicPlatformer-Windows # Name of the artifact zip file
          path: dist/BasicPlatformer.exe # Path to the executable generated by PyInstaller
          if-no-files-found: error # Fail the workflow if the exe wasn't created
