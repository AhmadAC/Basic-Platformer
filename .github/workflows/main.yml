name: Build Windows Executables (Platformer and Editor)

# Controls when the workflow will run
on:
  # Allows running this workflow manually from the Actions tab
  workflow_dispatch:

  # Runs on pushes targeting the main branch (optional)
  push:
    branches: [ "main" ]

  # Runs when a new release is published on GitHub
  release:
    types: [published]

jobs:
  build-windows:
    name: Build for Windows
    runs-on: windows-latest # Use a Windows runner

    steps:
      # 1. Checkout repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11' # Ensure this matches your project's requirements
          cache: 'pip'
          cache-dependency-path: requirements.txt # Assumes requirements.txt exists

      # 3. Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install from requirements.txt (MUST include pyinstaller)
          pip install -r requirements.txt
        shell: pwsh # Use PowerShell for consistency

      # --- Build Platformer.exe ---

      # 4. Generate BASE PyInstaller Spec File for Platformer
      - name: Generate Base PyInstaller Spec File for Platformer
        run: |
          pyi-makespec --windowed --name Platformer `
            --hidden-import PIL `
            --hidden-import PIL.Image `
            --hidden-import numpy `
            main.py  # Your main game script
          # This creates 'Platformer.spec'
        shell: pwsh

      # 5. Modify the Spec File to Add Data Files for Platformer
      - name: Add data files to Platformer Spec File
        run: |
          $specFile = "Platformer.spec" # Name matches '--name' arg above
          Write-Host "Checking if $specFile exists..."
          if (!(Test-Path $specFile)) {
            Write-Error "$specFile not found after pyi-makespec!"
            exit 1
          }
          Write-Host "$specFile found. Attempting to modify..."
          $specContent = Get-Content -Path $specFile -Raw
          # This adds the 'characters' folder from your project root
          # into the root of the bundled application.
          $dataToAdd = "[('characters', 'characters')]"
          
          # Regex to find 'datas=[]' (allowing for spaces) and replace it
          $modifiedContent = $specContent -replace 'datas=\s*\[\s*\]', "datas=$dataToAdd"

          # Check if replacement actually happened
          if ($specContent -eq $modifiedContent) {
            Write-Host "--- Platformer Spec File Content START ---"
            Write-Host $specContent
            Write-Host "--- Platformer Spec File Content END ---"
            Write-Error "Failed to find and replace 'datas=[]' pattern in $specFile for Platformer. Check the content above. This can also happen if the spec file didn't initially contain 'datas=[]' or if the data to add was an empty list and it was already empty."
            exit 1
          }

          # Write the modified content back to the spec file
          Set-Content -Path $specFile -Value $modifiedContent
          Write-Host "Successfully added datas to $specFile."
        shell: pwsh

      # 6. Build the Platformer executable using the MODIFIED spec file
      - name: Build Platformer executable from Spec File
        run: |
          pyinstaller --noconfirm --log-level INFO Platformer.spec
        shell: pwsh

      # 7. Upload the Platformer artifact (the generated FOLDER)
      - name: Upload Platformer Windows Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Platformer-Windows-Folder # Artifact name
          path: dist/Platformer/ # Path to the FOLDER generated by PyInstaller
          if-no-files-found: error # Fail if the folder wasn't created

      # --- Build Editor.exe ---

      # 8. Generate BASE PyInstaller Spec File for Editor
      - name: Generate Base PyInstaller Spec File for Editor
        run: |
          # Assumes your editor script is located at 'editor/editor.py'
          # Adjust the path if it's different.
          pyi-makespec --windowed --name Editor `
            --hidden-import PIL `
            --hidden-import PIL.Image `
            --hidden-import numpy `
            editor/editor.py # Path to your editor script
          # This creates 'Editor.spec'
          # Add any other hidden imports the editor might need.
        shell: pwsh

      # 9. Modify the Spec File to Add Data Files for Editor
      - name: Add data files to Editor Spec File
        run: |
          $specFile = "Editor.spec" # Name matches '--name' arg above
          Write-Host "Checking if $specFile exists..."
          if (!(Test-Path $specFile)) {
            Write-Error "$specFile not found after pyi-makespec!"
            exit 1
          }
          Write-Host "$specFile found. Attempting to modify..."
          $specContent = Get-Content -Path $specFile -Raw
          
          # Bundle the 'characters' folder for the Editor, similar to the Platformer.
          # This is necessary because editor_assets.py uses resource_path
          # which expects these assets to be available.
          $dataToSetForEditor = "[('characters', 'characters')]" 
          
          $patternToReplace = 'datas=\s*\[\s*\]' # Pattern to find the default datas=[]
          
          if ($specContent -match $patternToReplace) {
            $modifiedContent = $specContent -replace $patternToReplace, "datas=$dataToSetForEditor"
            Set-Content -Path $specFile -Value $modifiedContent
            Write-Host "Successfully set 'datas' in $specFile to $dataToSetForEditor."
            # Check if replacement actually happened if we intended to add data
            if (($specContent -eq $modifiedContent) -and ($dataToSetForEditor -ne "[]")) {
              Write-Host "--- Editor Spec File Content START ---"
              Write-Host $specContent
              Write-Host "--- Editor Spec File Content END ---"
              # This is now a critical error if we added data and nothing changed.
              Write-Error "CRITICAL: Tried to set non-empty datas for Editor, but spec file content did not change. Original datas line might not have been 'datas=[]' or was already set to the target. Halting build."
              exit 1
            } elseif (($specContent -eq $modifiedContent) -and ($dataToSetForEditor -eq "[]")) {
              # This case: we intended to set an empty datas, and it didn't change (was already empty). This is OK.
              Write-Host "Note: Content of $specFile for Editor did not change. This is expected as 'datas' was already '[]' and intended to be '[]'."
            }
          } else {
            # The default 'datas=[]' line was not found. This is unexpected for a fresh spec.
            Write-Host "--- Editor Spec File Content START ---"
            Write-Host $specContent
            Write-Host "--- Editor Spec File Content END ---"
            Write-Error "CRITICAL: The pattern '$patternToReplace' (default datas line) was not found in $specFile for Editor. If the Editor requires data files, you may need to manually inspect/create the .spec file or adjust this script. Halting build."
            exit 1
          }
        shell: pwsh

      # 10. Build the Editor executable using the MODIFIED spec file
      - name: Build Editor executable from Spec File
        run: |
          pyinstaller --noconfirm --log-level INFO Editor.spec
        shell: pwsh

      # 11. Upload the Editor artifact (the generated FOLDER)
      - name: Upload Editor Windows Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Editor-Windows-Folder # Artifact name
          path: dist/Editor/ # Path to the FOLDER generated by PyInstaller
          if-no-files-found: error # Fail if the folder wasn't created
