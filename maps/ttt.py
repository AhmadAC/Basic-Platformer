# Level: ttt
# Generated by Platformer Level Editor (PySide6 Version - Optimized Export)
import pygame
from tiles import Platform, Ladder, Lava # Make sure these match your game's tile classes
import constants as C

LEVEL_SPECIFIC_BACKGROUND_COLOR = (173, 216, 230)
player1_spawn_pos = (610, 238)
player1_spawn_props = {'max_health': 100, 'move_speed': 300.0, 'jump_strength': -900.0}

def load_map_ttt(initial_screen_width, initial_screen_height):
    """Loads the 'ttt' level."""
    print(f"Loading map: load_map_ttt...")
    platforms = pygame.sprite.Group()
    ladders = pygame.sprite.Group()
    hazards = pygame.sprite.Group()
    enemy_spawns_data = []
    collectible_spawns_data = []

    # --- Placed Objects (merged where possible) ---
    platforms.add(Platform(120, 160, 40, 40, (255, 0, 255), platform_type='ledge'))
    platforms.add(Platform(120, 240, 40, 40, (255, 0, 255), platform_type='ledge'))
    platforms.add(Platform(240, 240, 440, 40, (255, 0, 255), platform_type='ledge'))
    platforms.add(Platform(440, 440, 200, 40, (255, 0, 255), platform_type='ledge'))
    platforms.add(Platform(560, 320, 40, 40, (255, 0, 255), platform_type='ledge'))
    # No ladders placed.
    # No hazards placed.
    # No enemy spawns defined.
    collectible_spawns_data.append({'type': 'chest', 'pos': (235, 250), 'properties': {'item_type': 'coin', 'item_quantity': 1}})

    # --- Level Dimensions for Game Camera & Boundaries ---
    map_total_width_pixels = 1380
    level_min_y_absolute = 40
    level_max_y_absolute = 480
    main_ground_y_reference = 480
    main_ground_height_reference = 40

    _boundary_thickness = C.TILE_SIZE * 2
    _boundary_wall_height = level_max_y_absolute - level_min_y_absolute + (2 * _boundary_thickness)
    # Ensure height is positive if level_min_y_absolute is very large (e.g. map is high up)
    _boundary_wall_height = max(_boundary_thickness * 2, _boundary_wall_height)


    _boundary_color = getattr(C, 'DARK_GRAY', (50,50,50))

    # Filler wall on the far right (if map_total_width_pixels extends beyond content)
    platforms.add(Platform(680, level_min_y_absolute - _boundary_thickness, 700, _boundary_wall_height, _boundary_color, platform_type='wall'))

    # Boundary platforms (ensure these use effective_min_x_for_bounds if map doesn't start at 0)
    platforms.add(Platform(0, level_min_y_absolute - _boundary_thickness, map_total_width_pixels - effective_min_x_for_bounds, _boundary_thickness, _boundary_color, platform_type="boundary_wall_top"))
    platforms.add(Platform(0, level_max_y_absolute, map_total_width_pixels - effective_min_x_for_bounds, _boundary_thickness, _boundary_color, platform_type="boundary_wall_bottom"))
    platforms.add(Platform(effective_min_x_for_bounds - _boundary_thickness, level_min_y_absolute - _boundary_thickness, _boundary_thickness, _boundary_wall_height, _boundary_color, platform_type="boundary_wall_left"))
    platforms.add(Platform(map_total_width_pixels, level_min_y_absolute - _boundary_thickness, _boundary_thickness, _boundary_wall_height, _boundary_color, platform_type="boundary_wall_right"))

    print(f"Map '{function_name}' loaded with: {len(platforms)} platforms, {len(ladders)} ladders, {len(hazards)} hazards.")
    return (platforms, ladders, hazards, enemy_spawns_data, collectible_spawns_data,
            player1_spawn_pos, player1_spawn_props, # Ensure these are the global vars from the file
            map_total_width_pixels, level_min_y_absolute, level_max_y_absolute,
            main_ground_y_reference, main_ground_height_reference,
            LEVEL_SPECIFIC_BACKGROUND_COLOR)
