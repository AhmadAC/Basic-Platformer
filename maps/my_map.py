# Level: my_map
# Generated by Platformer Level Editor (Optimized Export)
import pygame
from tiles import Platform, Ladder, Lava
import constants as C

LEVEL_SPECIFIC_BACKGROUND_COLOR = (173, 216, 230)

def load_map_my_map(initial_screen_width, initial_screen_height):
    """
    Loads the 'my_map' level.
    """
    print(f"Loading map: load_map_my_map...")
    platforms = pygame.sprite.Group()
    ladders = pygame.sprite.Group()
    hazards = pygame.sprite.Group()
    enemy_spawns_data = []
    collectible_spawns_data = []

    player1_spawn = (449, 437)

    # --- Placed Objects (merged where possible) ---
    platforms.add(Platform(320, 440, 640, 40, (128,128,128), platform_type='wall'))
    platforms.add(Platform(320, 480, 680, 40, (128,128,128), platform_type='wall'))
    platforms.add(Platform(480, 520, 520, 40, (128,128,128), platform_type='wall'))
    # No ladders placed.
    hazards.add(Lava(280, 240.0, 40, 40, (255,69,0)))
    hazards.add(Lava(280, 280.0, 40, 40, (255,69,0)))
    hazards.add(Lava(280, 320.0, 40, 40, (255,69,0)))
    hazards.add(Lava(280, 360.0, 40, 40, (255,69,0)))
    hazards.add(Lava(280, 400.0, 40, 40, (255,69,0)))
    hazards.add(Lava(280, 440.0, 40, 40, (255,69,0)))
    hazards.add(Lava(280, 480.0, 40, 40, (255,69,0)))
    hazards.add(Lava(280, 520.0, 40, 40, (255,69,0)))
    hazards.add(Lava(1000.0, 160.0, 40, 40, (255,69,0)))
    hazards.add(Lava(1000.0, 200.0, 40, 40, (255,69,0)))
    hazards.add(Lava(1000.0, 240.0, 40, 40, (255,69,0)))
    hazards.add(Lava(1000.0, 280.0, 40, 40, (255,69,0)))
    hazards.add(Lava(1000.0, 320.0, 40, 40, (255,69,0)))
    hazards.add(Lava(1000.0, 360.0, 40, 40, (255,69,0)))
    hazards.add(Lava(1000.0, 400.0, 40, 40, (255,69,0)))
    hazards.add(Lava(1000.0, 440.0, 40, 40, (255,69,0)))
    hazards.add(Lava(1000.0, 480.0, 40, 40, (255,69,0)))
    enemy_spawns_data.append({'pos': (649, 197), 'patrol': None, 'enemy_color_id': 'red'})
    enemy_spawns_data.append({'pos': (649, 237), 'patrol': None, 'enemy_color_id': 'red'})
    enemy_spawns_data.append({'pos': (649, 317), 'patrol': None, 'enemy_color_id': 'red'})
    enemy_spawns_data.append({'pos': (649, 277), 'patrol': None, 'enemy_color_id': 'red'})
    enemy_spawns_data.append({'pos': (649, 357), 'patrol': None, 'enemy_color_id': 'red'})
    enemy_spawns_data.append({'pos': (649, 397), 'patrol': None, 'enemy_color_id': 'red'})
    enemy_spawns_data.append({'pos': (649, 437), 'patrol': None, 'enemy_color_id': 'red'})
    # No collectible spawns defined.

    # --- Level Dimensions for Game Camera & Boundaries ---
    map_total_width_pixels = 1280
    level_min_y_absolute = 80
    level_max_y_absolute = 560
    main_ground_y_reference = 560
    main_ground_height_reference = 40

    _boundary_thickness = C.TILE_SIZE * 2
    _boundary_wall_height = level_max_y_absolute - level_min_y_absolute + (2 * _boundary_thickness)
    _boundary_color = getattr(C, 'DARK_GRAY', (50,50,50))

    # Filler wall on the right to ensure no empty background padding
    platforms.add(Platform(1040, level_min_y_absolute - _boundary_thickness, 240, _boundary_wall_height, _boundary_color, platform_type='wall'))

    # Boundary platforms (these define the absolute edges of the level area)
    # Top boundary (ceiling)
    platforms.add(Platform(0, level_min_y_absolute - _boundary_thickness, map_total_width_pixels, _boundary_thickness, _boundary_color, platform_type="boundary_wall_top"))
    # Bottom boundary (floor/kill plane)
    platforms.add(Platform(0, level_max_y_absolute, map_total_width_pixels, _boundary_thickness, _boundary_color, platform_type="boundary_wall_bottom"))
    # Left boundary
    platforms.add(Platform(-_boundary_thickness, level_min_y_absolute - _boundary_thickness, _boundary_thickness, _boundary_wall_height, _boundary_color, platform_type="boundary_wall_left"))
    # Right boundary (placed at the very edge of map_total_width_pixels)
    platforms.add(Platform(map_total_width_pixels, level_min_y_absolute - _boundary_thickness, _boundary_thickness, _boundary_wall_height, _boundary_color, platform_type="boundary_wall_right"))

    print(f"Map 'load_map_my_map' loaded with: {len(platforms)} platforms, {len(ladders)} ladders, {len(hazards)} hazards.")
    return (platforms, ladders, hazards, enemy_spawns_data, collectible_spawns_data,
            player1_spawn,
            map_total_width_pixels, level_min_y_absolute, level_max_y_absolute,
            main_ground_y_reference, main_ground_height_reference,
            LEVEL_SPECIFIC_BACKGROUND_COLOR)