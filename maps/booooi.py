# Level: booooi
# Generated by Platformer Level Editor (Optimized Export)
import pygame
from tiles import Platform, Ladder, Lava
import constants as C

LEVEL_SPECIFIC_BACKGROUND_COLOR = (0, 100, 0)

def load_map_booooi(initial_screen_width, initial_screen_height):
    """
    Loads the 'booooi' level.
    """
    print(f"Loading map: load_map_booooi...")
    platforms = pygame.sprite.Group()
    ladders = pygame.sprite.Group()
    hazards = pygame.sprite.Group()
    enemy_spawns_data = []
    collectible_spawns_data = []

    player1_spawn = (9, 357)

    # --- Placed Objects (merged where possible) ---
    platforms.add(Platform(0, 380, 120, 20, (128,128,128), platform_type='wall'))
    platforms.add(Platform(120, 340, 40, 20, (128,128,128), platform_type='wall'))
    platforms.add(Platform(120, 360, 80, 40, (128,128,128), platform_type='wall'))
    platforms.add(Platform(320, 360, 80, 40, (128,128,128), platform_type='wall'))
    platforms.add(Platform(360, 340, 40, 20, (128,128,128), platform_type='wall'))
    platforms.add(Platform(400, 380, 120, 20, (128,128,128), platform_type='wall'))
    # No ladders placed.
    hazards.add(Lava(520, 360, 40, 40, (255,69,0)))
    hazards.add(Lava(560, 360, 40, 40, (255,69,0)))
    hazards.add(Lava(600, 360, 40, 40, (255,69,0)))
    hazards.add(Lava(80, 480, 40, 40, (255,69,0)))
    # No enemy spawns defined.
    # No collectible spawns defined.

    # --- Level Dimensions for Game Camera & Boundaries ---
    map_total_width_pixels = 1280
    level_min_y_absolute = 240
    level_max_y_absolute = 520
    main_ground_y_reference = 520
    main_ground_height_reference = 40

    _boundary_thickness = C.TILE_SIZE * 2
    _boundary_wall_height = level_max_y_absolute - level_min_y_absolute + (2 * _boundary_thickness)
    _boundary_color = getattr(C, 'DARK_GRAY', (50,50,50))

    # Filler wall on the right to ensure no empty background padding
    platforms.add(Platform(640, level_min_y_absolute - _boundary_thickness, 640, _boundary_wall_height, _boundary_color, platform_type='wall'))

    # Boundary platforms (these define the absolute edges of the level area)
    # Top boundary (ceiling)
    platforms.add(Platform(0, level_min_y_absolute - _boundary_thickness, map_total_width_pixels, _boundary_thickness, _boundary_color, platform_type="boundary_wall_top"))
    # Bottom boundary (floor/kill plane)
    platforms.add(Platform(0, level_max_y_absolute, map_total_width_pixels, _boundary_thickness, _boundary_color, platform_type="boundary_wall_bottom"))
    # Left boundary
    platforms.add(Platform(-_boundary_thickness, level_min_y_absolute - _boundary_thickness, _boundary_thickness, _boundary_wall_height, _boundary_color, platform_type="boundary_wall_left"))
    # Right boundary (placed at the very edge of map_total_width_pixels)
    platforms.add(Platform(map_total_width_pixels, level_min_y_absolute - _boundary_thickness, _boundary_thickness, _boundary_wall_height, _boundary_color, platform_type="boundary_wall_right"))

    print(f"Map 'load_map_booooi' loaded with: {len(platforms)} platforms, {len(ladders)} ladders, {len(hazards)} hazards.")
    return (platforms, ladders, hazards, enemy_spawns_data, collectible_spawns_data,
            player1_spawn,
            map_total_width_pixels, level_min_y_absolute, level_max_y_absolute,
            main_ground_y_reference, main_ground_height_reference,
            LEVEL_SPECIFIC_BACKGROUND_COLOR)