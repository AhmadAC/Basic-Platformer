# Level: try
# Generated by Platformer Level Editor on 18190
import pygame
from tiles import Platform, Ladder, Lava # Ensure all used tile types are imported by game
import constants as C

# Optional: Define level-specific background color if your game supports it
LEVEL_SPECIFIC_BACKGROUND_COLOR = (173, 216, 230)

def load_map_try(initial_screen_width, initial_screen_height):
    """
    Loads the 'try' level.
    Generated by the level editor.
    """
    print(f"Loading map: load_map_try...") # Game-side log
    platforms = pygame.sprite.Group()
    ladders = pygame.sprite.Group()
    hazards = pygame.sprite.Group()
    enemy_spawns_data = []
    collectible_spawns_data = []

    player1_spawn = (129, 517)
    
    # --- Placed Objects ---
    platforms.add(Platform(40, 520, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(80, 520, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(120, 520, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(160, 520, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(240, 520, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(280, 520, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(360, 520, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(400, 520, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(440, 520, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(480, 520, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(520, 520, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(560, 520, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(600, 520, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(640, 520, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(680, 520, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(720, 520, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(760, 520, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(800, 520, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(840, 520, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(880, 520, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(920, 520, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(960, 520, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(320, 520, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(200, 520, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(40, 480, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(40, 440, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(40, 400, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(40, 360, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(40, 320, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(80, 320, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(120, 320, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(160, 320, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(200, 320, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(240, 320, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(280, 320, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(320, 320, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(360, 320, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(400, 320, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(400, 360, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(400, 400, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(640, 440, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(640, 480, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(680, 440, 40, 40, C.DARK_GREEN, platform_type='ledge'))
    platforms.add(Platform(720, 440, 40, 40, C.DARK_GREEN, platform_type='ledge'))
    platforms.add(Platform(760, 440, 40, 40, C.DARK_GREEN, platform_type='ledge'))
    platforms.add(Platform(800, 440, 40, 40, C.DARK_GREEN, platform_type='ledge'))
    platforms.add(Platform(600, 280, 40, 40, C.DARK_GREEN, platform_type='ledge'))
    platforms.add(Platform(640, 280, 40, 40, C.DARK_GREEN, platform_type='ledge'))
    platforms.add(Platform(680, 280, 40, 40, C.DARK_GREEN, platform_type='ledge'))
    platforms.add(Platform(720, 280, 40, 40, C.DARK_GREEN, platform_type='ledge'))
    platforms.add(Platform(760, 280, 40, 40, C.DARK_GREEN, platform_type='ledge'))
    platforms.add(Platform(920, 360, 40, 40, C.DARK_GREEN, platform_type='ledge'))
    platforms.add(Platform(960, 360, 40, 40, C.DARK_GREEN, platform_type='ledge'))
    platforms.add(Platform(360, 160, 40, 40, C.DARK_GREEN, platform_type='ledge'))
    platforms.add(Platform(400, 160, 40, 40, C.DARK_GREEN, platform_type='ledge'))
    platforms.add(Platform(440, 160, 40, 40, C.DARK_GREEN, platform_type='ledge'))
    platforms.add(Platform(480, 160, 40, 40, C.DARK_GREEN, platform_type='ledge'))
    platforms.add(Platform(520, 160, 40, 40, C.DARK_GREEN, platform_type='ledge'))
    platforms.add(Platform(1000, 520, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(1040, 520, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(1080, 520, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(1120, 520, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(1160, 520, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(1160, 480, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(1160, 440, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(1160, 400, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(1160, 360, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(1160, 320, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(1160, 280, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(1160, 240, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(1160, 200, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(1160, 160, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(1160, 120, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(1160, 80, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(1160, 40, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(1160, 0, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(1040, 480, 40, 40, C.GRAY, platform_type='wall'))
    platforms.add(Platform(1040, 440, 40, 40, C.GRAY, platform_type='wall'))
    # No ladders placed.
    hazards.add(Lava(1120, 480, 40, 40, C.ORANGE_RED))
    hazards.add(Lava(1080, 480, 40, 40, C.ORANGE_RED))
    hazards.add(Lava(1080, 440, 40, 40, C.ORANGE_RED))
    enemy_spawns_data.append({'pos': (729, 517), 'patrol': None, 'enemy_color_id': 'cyan'})
    enemy_spawns_data.append({'pos': (929, 517), 'patrol': None, 'enemy_color_id': 'pink'})
    enemy_spawns_data.append({'pos': (569, 517), 'patrol': None, 'enemy_color_id': 'yellow'})
    enemy_spawns_data.append({'pos': (609, 277), 'patrol': None, 'enemy_color_id': 'green'})
    collectible_spawns_data.append({'type': 'chest', 'pos': (426, 159)})

    # --- Level Dimensions for Game Camera & Boundaries ---
    map_total_width_pixels = 1320
    level_min_y_absolute = -80 # Top-most Y coordinate for camera/content
    level_max_y_absolute = 640 # Bottom-most Y coordinate for camera/content (e.g., death plane below this)
    
    main_ground_y_reference = 560 # Y-value of the main 'floor' surface
    main_ground_height_reference = 40 # Height of typical ground tiles

    # --- Auto-generated Boundary Walls (Invisible in game unless styled) ---
    # These ensure entities cannot go outside the defined level space.
    _boundary_thickness = C.TILE_SIZE * 2 # Make them thick enough
    _boundary_wall_height = level_max_y_absolute - level_min_y_absolute + (2 * _boundary_thickness) # Span slightly beyond min/max_y

    # Top boundary (ceiling) - place its bottom edge at level_min_y_absolute
    platforms.add(Platform(0, level_min_y_absolute - _boundary_thickness, map_total_width_pixels, _boundary_thickness, C.DARK_GRAY, platform_type="boundary_wall_top"))
    # Bottom boundary (floor/kill plane) - place its top edge at level_max_y_absolute
    platforms.add(Platform(0, level_max_y_absolute, map_total_width_pixels, _boundary_thickness, C.DARK_GRAY, platform_type="boundary_wall_bottom"))
    # Left boundary wall
    platforms.add(Platform(-_boundary_thickness, level_min_y_absolute - _boundary_thickness, _boundary_thickness, _boundary_wall_height, C.DARK_GRAY, platform_type="boundary_wall_left"))
    # Right boundary wall
    platforms.add(Platform(map_total_width_pixels, level_min_y_absolute - _boundary_thickness, _boundary_thickness, _boundary_wall_height, C.DARK_GRAY, platform_type="boundary_wall_right"))

    print(f"Map 'load_map_try' loaded with: {len(platforms)} platforms, {len(ladders)} ladders, {len(hazards)} hazards.") # Game-side log
    return (platforms, ladders, hazards, enemy_spawns_data, collectible_spawns_data,
            player1_spawn,
            map_total_width_pixels, level_min_y_absolute, level_max_y_absolute,
            main_ground_y_reference, main_ground_height_reference,
            LEVEL_SPECIFIC_BACKGROUND_COLOR) # Return background color
