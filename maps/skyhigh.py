# Level: skyhigh
# Generated by Platformer Level Editor (Optimized Export)
import pygame
from tiles import Platform, Ladder, Lava
import constants as C

LEVEL_SPECIFIC_BACKGROUND_COLOR = (255, 0, 255)

def load_map_skyhigh(initial_screen_width, initial_screen_height):
    """
    Loads the 'skyhigh' level.
    """
    print(f"Loading map: load_map_skyhigh...")
    platforms = pygame.sprite.Group()
    ladders = pygame.sprite.Group()
    hazards = pygame.sprite.Group()
    enemy_spawns_data = []
    collectible_spawns_data = []

    player1_spawn = (249.0, 3837.0)

    # --- Placed Objects (merged where possible) ---
    platforms.add(Platform(480.0, 3840.0, 320, 20, (0,100,0), platform_type='ledge'))
    platforms.add(Platform(920.0, 3840.0, 160, 20, (0,100,0), platform_type='ledge'))
    platforms.add(Platform(1120.0, 3860.0, 160, 20, (0,100,0), platform_type='ledge'))
    platforms.add(Platform(1280.0, 3880.0, 120, 20, (0,100,0), platform_type='ledge'))
    platforms.add(Platform(0, 3560.0, 240, 280, (128,128,128), platform_type='wall'))
    platforms.add(Platform(0, 4000.0, 240, 40, (128,128,128), platform_type='wall'))
    platforms.add(Platform(0, 3840, 280, 80, (128,128,128), platform_type='wall'))
    platforms.add(Platform(0, 3920.0, 480, 40, (128,128,128), platform_type='wall'))
    platforms.add(Platform(0, 3960.0, 4040, 40, (128,128,128), platform_type='wall'))
    platforms.add(Platform(40, 3440.0, 200, 120, (128,128,128), platform_type='wall'))
    platforms.add(Platform(80, 0, 160, 40, (128,128,128), platform_type='wall'))
    platforms.add(Platform(120, 200.0, 80, 40, (128,128,128), platform_type='wall'))
    platforms.add(Platform(120, 320.0, 80, 240, (128,128,128), platform_type='wall'))
    platforms.add(Platform(120, 1680.0, 80, 80, (128,128,128), platform_type='wall'))
    platforms.add(Platform(120, 2000.0, 80, 120, (128,128,128), platform_type='wall'))
    platforms.add(Platform(120, 2680.0, 80, 200, (128,128,128), platform_type='wall'))
    platforms.add(Platform(120, 40, 120, 160, (128,128,128), platform_type='wall'))
    platforms.add(Platform(120, 240.0, 120, 80, (128,128,128), platform_type='wall'))
    platforms.add(Platform(120, 640.0, 120, 320, (128,128,128), platform_type='wall'))
    platforms.add(Platform(120, 1040.0, 120, 120, (128,128,128), platform_type='wall'))
    platforms.add(Platform(120, 1320.0, 120, 160, (128,128,128), platform_type='wall'))
    platforms.add(Platform(120, 1600.0, 120, 80, (128,128,128), platform_type='wall'))
    platforms.add(Platform(120, 1760.0, 120, 40, (128,128,128), platform_type='wall'))
    platforms.add(Platform(120, 1960.0, 120, 40, (128,128,128), platform_type='wall'))
    platforms.add(Platform(120, 2120.0, 120, 80, (128,128,128), platform_type='wall'))
    platforms.add(Platform(120, 2280.0, 120, 200, (128,128,128), platform_type='wall'))
    platforms.add(Platform(120, 2600.0, 120, 80, (128,128,128), platform_type='wall'))
    platforms.add(Platform(120, 2880.0, 120, 80, (128,128,128), platform_type='wall'))
    platforms.add(Platform(120, 3080.0, 120, 120, (128,128,128), platform_type='wall'))
    platforms.add(Platform(120, 3360, 120, 80, (128,128,128), platform_type='wall'))
    platforms.add(Platform(160, 560.0, 80, 80, (128,128,128), platform_type='wall'))
    platforms.add(Platform(160, 960.0, 80, 80, (128,128,128), platform_type='wall'))
    platforms.add(Platform(160, 1160.0, 80, 160, (128,128,128), platform_type='wall'))
    platforms.add(Platform(160, 1480.0, 80, 120, (128,128,128), platform_type='wall'))
    platforms.add(Platform(160, 1800.0, 80, 160, (128,128,128), platform_type='wall'))
    platforms.add(Platform(160, 2200.0, 80, 80, (128,128,128), platform_type='wall'))
    platforms.add(Platform(160, 2480.0, 80, 120, (128,128,128), platform_type='wall'))
    platforms.add(Platform(160, 2960.0, 80, 120, (128,128,128), platform_type='wall'))
    platforms.add(Platform(160, 3200.0, 80, 160, (128,128,128), platform_type='wall'))
    platforms.add(Platform(440, 4000.0, 240, 40, (128,128,128), platform_type='wall'))
    platforms.add(Platform(480, 3480, 120, 40, (128,128,128), platform_type='wall'))
    platforms.add(Platform(520, 3440, 80, 40, (128,128,128), platform_type='wall'))
    platforms.add(Platform(920.0, 3920.0, 1480, 40, (128,128,128), platform_type='wall'))
    platforms.add(Platform(1600.0, 4000.0, 80, 40, (128,128,128), platform_type='wall'))
    platforms.add(Platform(1600.0, 3880.0, 240, 40, (128,128,128), platform_type='wall'))
    platforms.add(Platform(2200.0, 4000.0, 600, 40, (128,128,128), platform_type='wall'))
    platforms.add(Platform(2560.0, 3920.0, 1480, 40, (128,128,128), platform_type='wall'))
    platforms.add(Platform(2920.0, 4000.0, 200, 40, (128,128,128), platform_type='wall'))
    platforms.add(Platform(3560.0, 4000, 200, 40, (128,128,128), platform_type='wall'))
    platforms.add(Platform(3840.0, 3800, 120, 80, (128,128,128), platform_type='wall'))
    platforms.add(Platform(3840.0, 3880, 200, 40, (128,128,128), platform_type='wall'))
    platforms.add(Platform(3840.0, 4000, 200, 40, (128,128,128), platform_type='wall'))
    platforms.add(Platform(3880.0, 40, 80, 3760, (128,128,128), platform_type='wall'))
    # No ladders placed.
    hazards.add(Lava(480.0, 3920, 40, 40, (255,69,0)))
    hazards.add(Lava(520.0, 3920, 40, 40, (255,69,0)))
    hazards.add(Lava(560.0, 3920, 40, 40, (255,69,0)))
    hazards.add(Lava(600.0, 3920, 40, 40, (255,69,0)))
    hazards.add(Lava(640.0, 3920, 40, 40, (255,69,0)))
    hazards.add(Lava(680.0, 3920, 40, 40, (255,69,0)))
    hazards.add(Lava(760.0, 3920, 40, 40, (255,69,0)))
    hazards.add(Lava(800.0, 3920, 40, 40, (255,69,0)))
    hazards.add(Lava(840.0, 3920, 40, 40, (255,69,0)))
    hazards.add(Lava(880.0, 3920, 40, 40, (255,69,0)))
    hazards.add(Lava(720.0, 3920, 40, 40, (255,69,0)))
    enemy_spawns_data.append({'pos': (649, 3837.0), 'patrol': None, 'enemy_color_id': 'green'})
    enemy_spawns_data.append({'pos': (729, 3837), 'patrol': None, 'enemy_color_id': 'pink'})
    enemy_spawns_data.append({'pos': (1009.0, 3837.0), 'patrol': None, 'enemy_color_id': 'yellow'})
    collectible_spawns_data.append({'type': 'chest', 'pos': (946.0, 3839.0)})

    # --- Level Dimensions for Game Camera & Boundaries ---
    map_total_width_pixels = 4200
    level_min_y_absolute = -80
    level_max_y_absolute = 4040
    main_ground_y_reference = 4040
    main_ground_height_reference = 40

    _boundary_thickness = C.TILE_SIZE * 2
    _boundary_wall_height = level_max_y_absolute - level_min_y_absolute + (2 * _boundary_thickness)
    _boundary_color = getattr(C, 'DARK_GRAY', (50,50,50))

    # Filler wall on the right to ensure no empty background padding
    platforms.add(Platform(4040, level_min_y_absolute - _boundary_thickness, 160, _boundary_wall_height, _boundary_color, platform_type='wall'))

    # Boundary platforms (these define the absolute edges of the level area)
    # Top boundary (ceiling)
    platforms.add(Platform(0, level_min_y_absolute - _boundary_thickness, map_total_width_pixels, _boundary_thickness, _boundary_color, platform_type="boundary_wall_top"))
    # Bottom boundary (floor/kill plane)
    platforms.add(Platform(0, level_max_y_absolute, map_total_width_pixels, _boundary_thickness, _boundary_color, platform_type="boundary_wall_bottom"))
    # Left boundary
    platforms.add(Platform(-_boundary_thickness, level_min_y_absolute - _boundary_thickness, _boundary_thickness, _boundary_wall_height, _boundary_color, platform_type="boundary_wall_left"))
    # Right boundary (placed at the very edge of map_total_width_pixels)
    platforms.add(Platform(map_total_width_pixels, level_min_y_absolute - _boundary_thickness, _boundary_thickness, _boundary_wall_height, _boundary_color, platform_type="boundary_wall_right"))

    print(f"Map 'load_map_skyhigh' loaded with: {len(platforms)} platforms, {len(ladders)} ladders, {len(hazards)} hazards.")
    return (platforms, ladders, hazards, enemy_spawns_data, collectible_spawns_data,
            player1_spawn,
            map_total_width_pixels, level_min_y_absolute, level_max_y_absolute,
            main_ground_y_reference, main_ground_height_reference,
            LEVEL_SPECIFIC_BACKGROUND_COLOR)