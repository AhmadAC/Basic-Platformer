# Level: 11
# Generated by Platformer Level Editor (Optimized Export)
import pygame
from tiles import Platform, Ladder, Lava
import constants as C

LEVEL_SPECIFIC_BACKGROUND_COLOR = (173, 216, 230)

def load_map_11(initial_screen_width, initial_screen_height):
    """
    Loads the '11' level.
    """
    print(f"Loading map: load_map_11...")
    platforms = pygame.sprite.Group()
    ladders = pygame.sprite.Group()
    hazards = pygame.sprite.Group()
    enemy_spawns_data = []
    collectible_spawns_data = []

    player1_spawn = (49, 757)

    # --- Placed Objects (merged where possible) ---
    platforms.add(Platform(280, 680, 560, 10, (0,100,0), platform_type='ledge'))
    platforms.add(Platform(0, 760, 1240, 80, (128,128,128), platform_type='wall'))
    platforms.add(Platform(180, 720, 20, 40, (128,128,128), platform_type='wall'))
    platforms.add(Platform(260, 640, 20, 40, (128,128,128), platform_type='wall'))
    platforms.add(Platform(820, 640, 20, 40, (128,128,128), platform_type='wall'))
    platforms.add(Platform(900.0, 720, 20, 40, (128,128,128), platform_type='wall'))
    # No ladders placed.
    # No hazards placed.
    enemy_spawns_data.append({'pos': (209, 757), 'patrol': None, 'enemy_color_id': 'green'})
    enemy_spawns_data.append({'pos': (889, 757), 'patrol': None, 'enemy_color_id': 'green'})
    enemy_spawns_data.append({'pos': (369, 677), 'patrol': None, 'enemy_color_id': 'green'})
    enemy_spawns_data.append({'pos': (769, 677), 'patrol': None, 'enemy_color_id': 'green'})
    # No collectible spawns defined.

    # --- Level Dimensions for Game Camera & Boundaries ---
    map_total_width_pixels = 1400
    level_min_y_absolute = 560
    level_max_y_absolute = 840
    main_ground_y_reference = 840
    main_ground_height_reference = 40

    _boundary_thickness = C.TILE_SIZE * 2
    _boundary_wall_height = level_max_y_absolute - level_min_y_absolute + (2 * _boundary_thickness)
    _boundary_color = getattr(C, 'DARK_GRAY', (50,50,50))

    # Filler wall on the right to ensure no empty background padding
    platforms.add(Platform(1240, level_min_y_absolute - _boundary_thickness, 160, _boundary_wall_height, _boundary_color, platform_type='wall'))

    # Boundary platforms (these define the absolute edges of the level area)
    # Top boundary (ceiling)
    platforms.add(Platform(0, level_min_y_absolute - _boundary_thickness, map_total_width_pixels, _boundary_thickness, _boundary_color, platform_type="boundary_wall_top"))
    # Bottom boundary (floor/kill plane)
    platforms.add(Platform(0, level_max_y_absolute, map_total_width_pixels, _boundary_thickness, _boundary_color, platform_type="boundary_wall_bottom"))
    # Left boundary
    platforms.add(Platform(-_boundary_thickness, level_min_y_absolute - _boundary_thickness, _boundary_thickness, _boundary_wall_height, _boundary_color, platform_type="boundary_wall_left"))
    # Right boundary (placed at the very edge of map_total_width_pixels)
    platforms.add(Platform(map_total_width_pixels, level_min_y_absolute - _boundary_thickness, _boundary_thickness, _boundary_wall_height, _boundary_color, platform_type="boundary_wall_right"))

    print(f"Map 'load_map_11' loaded with: {len(platforms)} platforms, {len(ladders)} ladders, {len(hazards)} hazards.")
    return (platforms, ladders, hazards, enemy_spawns_data, collectible_spawns_data,
            player1_spawn,
            map_total_width_pixels, level_min_y_absolute, level_max_y_absolute,
            main_ground_y_reference, main_ground_height_reference,
            LEVEL_SPECIFIC_BACKGROUND_COLOR)